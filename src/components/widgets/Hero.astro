---
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:mt-[76px] md: not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <div
    class="absolute inset-0 z-[-1] pointer-events-none
      opacity-80 dark:opacity-70
      bg-gradient-to-b from-transparent to-black/20
      dark:from-transparent dark:to-white/10
      overflow-clip
      intersect-once intercept-no-queue intersect-quarter
        motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
    title="hero-image"
  >
    <Image
      widths={[400, 768, 1024, 2040]}
      sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
      loading="eager"
      width={1024}
      height={576}
      class="object-fill min-w-full min-h-full"
      loading="eager"
      {...image as object}
    />

    <!-- {banner ? <Fragment set:html={banner} /> : null} -->
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-[76px] pointer-events-none"></div>
    <div class="pt-12 md:pt-20 pb-0 md:pb-0 flex flex-col items-center">
      <div
        title="contents"
        class="bg-white/80 dark:bg-black/80 backdrop-blur-md rounded-xl shadow-lg
          overflow-hidden
          md:-mt-[76px] w-full"
      >
        <div class="text-center py-10 px-16 md:py-16 max-w-5xl mx-auto">
          {
            tagline && (
              <p
                class="
                text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase
                intersect-once intersect-quarter
                motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade
              "
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="
                text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200
                intersect-once intersect-quarter
                motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade
              "
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl mx-auto">
            {
              subtitle && (
                <p
                  class="
                  text-xl text-muted mb-6 dark:text-slate-300
                  intersect-once intersect-quarter
                  motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade
                "
                  set:html={subtitle}
                />
              )
            }
            {
              actions && (
                <div class="max-w-xs sm:max-w-md m-auto flex flex-col sm:flex-row sm:justify-center gap-4">
                  {Array.isArray(actions) ? (
                    actions.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )}
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
        </div>
      </div>
    </div>
    <div class="pb-[120px] pointer-events-none"></div>
  </div>
</section>
